




--concrete examples
nothing = L Unit
just = R . Id
dfa1 :: LTS Char (Unit :+: Id) Int
dfa1 = M.fromList [ ('a', funcFromList [ (1,just 2)
                                       , (2,nothing)
                                       , (3,nothing)
                                       ])
                  , ('b', funcFromList [ (1,just 3)
                                       , (2,just 3)
                                       , (3,nothing)])
                  ]


l :: [a] -> List a
l = Lst . l2list

--stupid non generic way, just to check that fnctions are cprrectly defined
instance Crush [] where
   crush = foldr

lfa1 :: LTS Char [] Int
lfa1 = M.fromList [ ('a', funcFromList [ (1,[2,1])
                                       , (2,[] )
                                       , (3,[])
                                       ])
                  , ('b', funcFromList [ (1,[3])
                                       , (2,[1,3])
                                       , (3,[])])
                  ]


lfa2 :: LTS Char [] Int

lfa2 = M.fromList [ ('a', funcFromList [ (1,[2,4])
                                       , (3,[2,4])
                                       , (2,[])
                                       , (4,[])
                                       ])
                  , ('b', funcFromList [ (1,[2,4])
                                       , (3,[2,4])
                                       , (2,[])
                                       , (4,[])
                                       ])
                  ]

lfa3 = M.fromList [ ('a', funcFromList [ (1,[4,2])
                                       , (3,[2,4])
                                       , (2,[])
                                       , (4,[])
                                       ])
                  , ('b', funcFromList [ (1,[2,4])
                                       , (3,[2,4])
                                       , (2,[1])
                                       , (4,[])
                                       ])
                  ]



